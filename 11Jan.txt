Basic X windows programming

X windows:
1. X server 
- provide services for client application to render, draw, mesh, etc...

2. X lib
- client

some resources store on x server
x server batches messages (XFlush command push messages out)

Xlib
so that ppl can avoid reinventing wheels
no common look and feel when implementing with xlib
no GUI toolkits --> flexible

client-init events: user inits ??? e.g. mouse click,move, keyboard events...

':0' -- open display 

stroke model: device specific?
region model: 

when u start to draw, routines use same sets of patterns again and again
-->graphics context

Xlib: GC structure
      stored on the x server
      global to the application(need policy)

What happens if the window minimize?
-everything disappaers
-soln: painter's algorithm
-note: repaint when necessary(e.g. before client-init)
       minimize the time of XFlush

Events Method
-ambiguity
-def: a struct that notify us sth occurs...
 e.g. keyboard press, release, mouse click, ... in terms of structures in the code

Role of X server
-collect, put, order, decide, and dispatch events

collecting events:
-come from underlying hardware e.g. mouse?
-come from higher level roles, e.g. window 

Event rates: e.g. USB default rate is 125Hz
syncopated: special events require accurate timing

mouse button press/release are differentiated
usually press doenst do anything
on release, the event gets fired

damage events
-indicate sth in the windows needs changing
-e.g. resiziing a window can fire an expose event can throlt CPU as the queue is filled with many pairs of (resize, repaint) events
-two options regarding to expose events: ignore / timeout

x server/client network load(need to pay attention of traffic)

java GUI low level structure:
-inheritance hirearchy
-subclass is one event+additional info

animation
-repaint 30-60 times per second...
-dont use more CPU than necessary

double buffering
-offscreen buffer, draw the buffer, then copy the buffer to the screen
-user wont see anything until XCopyArea() fires
-issues: window resize,but pixals are not
	 memory management
	 use smaller region to draw

clipping
-subregions to repaint
-in java there could be performance problem when auto clipping
    as it automatically repaints basically everything within the clipping region regardless of how complex the region is(say you have a beautiful sth there)



